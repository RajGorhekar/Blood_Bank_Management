package bloodbank;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Raj
 */
public class UpdateDelete extends javax.swing.JFrame {
    private Object[] selectedArray;
    /**
     * Creates new form UpdateDelete
     */
    public UpdateDelete() {}
    
    public UpdateDelete(Object[] selectedArray) {
        initComponents();
        this.selectedArray = selectedArray;
        performDbInit();
    }
    
    private void performDbInit() {
        String query = "SELECT * FROM donor_master WHERE `Blood Group` = '" + selectedArray[2].toString() + "' AND Quantity >= " + (int)selectedArray[3];
        try {
            DriverManager.registerDriver(new com.mysql.jdbc.Driver()); // Used only to load the class and not create an instance
            try (Connection dbConnection = DriverManager.getConnection("jdbc:mysql://localhost:3306/lsapp?zeroDateTimeBehavior=convertToNull", "root", "")) {
                try (PreparedStatement statement = dbConnection.prepareStatement(query)) {
                    donors.setModel(DbUtils.resultSetToTableModel(statement.executeQuery()));
                    if (donors.getRowCount() == 0)
                        jLabel1.setText("No donors found");
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        donors = new javax.swing.JTable();
        submitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Submit Page");
        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setMaximumSize(new java.awt.Dimension((int) (0.92 * java.awt.Toolkit.getDefaultToolkit().getScreenSize().getWidth()), (int)(0.92 * java.awt.Toolkit.getDefaultToolkit().getScreenSize().getHeight())));
        jPanel1.setMinimumSize(new java.awt.Dimension((int) (0.92 * java.awt.Toolkit.getDefaultToolkit().getScreenSize().getWidth()), (int)(0.92 * java.awt.Toolkit.getDefaultToolkit().getScreenSize().getHeight())));
        jPanel1.setPreferredSize(new java.awt.Dimension((int) (0.92 * java.awt.Toolkit.getDefaultToolkit().getScreenSize().getWidth()), (int)(0.92 * java.awt.Toolkit.getDefaultToolkit().getScreenSize().getHeight())));

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 36)); // NOI18N
        jLabel1.setText("Select the required donor");

        jScrollPane1.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jScrollPane1.setMaximumSize(new java.awt.Dimension(super.getWidth() - 40, super.getHeight() - 80));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(super.getWidth() - 40, super.getHeight() - 80));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(super.getWidth() - 40, super.getHeight() - 80));

        donors.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        donors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Donor_ID", "Name", "Phone", "Location", "Quantity", "Blood Group", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        donors.setIntercellSpacing(new java.awt.Dimension(0, 0));
        donors.setRowHeight(30);
        donors.setSelectionBackground(new java.awt.Color(232, 57, 95));
        donors.getTableHeader().setReorderingAllowed(false);
        donors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                donorsMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(donors);

        submitButton.setBackground(new java.awt.Color(0, 153, 153));
        submitButton.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        submitButton.setForeground(new java.awt.Color(255, 255, 255));
        submitButton.setText("Submit");
        submitButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        submitButton.setEnabled(false);
        submitButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(548, 548, 548)
                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(547, 547, 547))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addGap(31, 31, 31)
                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1281, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        try {
            Object[] array = new Object[7];
            for (int i = 0; i < 7; i++)
                array[i] = donors.getValueAt(donors.getSelectedRow(), i);
            
            DriverManager.registerDriver(new com.mysql.jdbc.Driver()); // Used only to load the class and not create an instance
            try (Connection dbConnection = DriverManager.getConnection("jdbc:mysql://localhost:3306/lsapp?zeroDateTimeBehavior=convertToNull", "root", "")) {
                String query;
                if ((int)array[4] == (int)selectedArray[3])
                    query = "DELETE FROM donor_master WHERE "
                            + "Donor_ID = " + (int)array[0] + " AND "
                            + "Name = '" + array[1].toString() + "' AND "
                            + "Phone = '" + array[2].toString() + "' AND "
                            + "Location = '" + array[3].toString() + "' AND "
                            + "Quantity = " + (int)array[4] + " AND "
                            + "`Blood Group` = '" + array[5].toString() + "' AND "
                            + "Email = '" + array[6].toString() + "'";
                else
                    query = "UPDATE donor_master "
                            + "SET Quantity = Quantity - " + (int)selectedArray[3] + " WHERE "
                            + "Donor_ID = " + (int)array[0] + " AND "
                            + "Name = '" + array[1].toString() + "' AND "
                            + "Phone = '" + array[2].toString() + "' AND "
                            + "Location = '" + array[3].toString() + "' AND "
                            + "Quantity = " + (int)array[4] + " AND "
                            + "`Blood Group` = '" + array[5].toString() + "' AND "
                            + "Email = '" + array[6].toString() + "'";
                try (PreparedStatement statement = dbConnection.prepareStatement(query)) {
                    if (statement.executeUpdate() > 0)
                        System.out.println("Success");
                    else
                        JOptionPane.showMessageDialog(null, "Update failed in between", "Error", JOptionPane.ERROR_MESSAGE);
                }
                query = "UPDATE request_master SET Status = 'Answered' WHERE "
                        + "Request_ID = " + (int)selectedArray[0] + " AND "
                        + "Patient_ID = (SELECT Patient_ID FROM patient_master WHERE Name = '" + selectedArray[1].toString() + "' AND BloodGroup = '" + selectedArray[2].toString() + "') AND "
                        + "Quantity = " + (int)selectedArray[3] + " AND "
                        + "Location = '" + selectedArray[4].toString() + "' AND "
                        + "DateOfRequirement = '" + selectedArray[5].toString() + "' AND "
                        + "Status = 'Remaining'";
                try (PreparedStatement statement = dbConnection.prepareStatement(query)) {
                    if (statement.executeUpdate() > 0)
                        JOptionPane.showMessageDialog(null, "Update Successful", "Success", JOptionPane.INFORMATION_MESSAGE);
                    else
                        JOptionPane.showMessageDialog(null, "Update Failed", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
        performDbInit();
        submitButton.setEnabled(false);
    }//GEN-LAST:event_submitButtonActionPerformed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        if (donors.getSelectedRow() != -1)
            donors.clearSelection();
        submitButton.setEnabled(false);
    }//GEN-LAST:event_formMouseReleased

    private void donorsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_donorsMouseReleased
        if (donors.getSelectedRow() != -1)
            submitButton.setEnabled(true);
    }//GEN-LAST:event_donorsMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateDelete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new UpdateDelete().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable donors;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables
}
